import { effect, untrack, mount, RippleMap  } from 'ripple';
import { getHashPath, findRoute } from "@/lib/utils";
import { NotFound } from "@/components/not-found.ripple";
import { Loading } from "@/components/loading.ripple";
import routes, { routesTree}  from 'virtual:ripple-routes';
import { Route } from "./route.ripple";
import { RouteContext } from "./context";

export function createHashRouterApp({ target}) {
	mount(RouteApp, { target});
}

export component RouteApp() {
	let $currentPath = untrack(() => getHashPath());
	let $loading = true;
	let $newRoute = null;
	const $routeContext = new RippleMap(["documentTitle", document.title], ["routes", routes])

	effect(() => {
		RouteContext.set({ documentTitle: document.title, routes });
	})

	effect(() => {
		$loading = false;
		$newRoute = findRoute($currentPath, routes);
	});

	untrack(() => {
		RouteContext.set({ documentTitle: document.title, routes });
	})

	effect(() => {
		
		const onPopState = () => {
			$currentPath = getHashPath();
		};
		window.addEventListener('hashchange', onPopState);

		return () => window.removeEventListener('hashchange', onPopState);
	});
	
	if($loading){
		<Loading />
	}
	else if (!$newRoute) {
		<NotFound />
	} 
	else {
		<Route $route={$newRoute} />
	}
}
