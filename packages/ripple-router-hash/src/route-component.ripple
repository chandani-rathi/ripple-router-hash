import { effect, track } from 'ripple';
import { getHashPath, arrayToTree, findRoute } from "@/lib/utils";
import { NotFound } from "@/components/not-found.ripple";
import { Loading } from "@/components/loading.ripple";
import { Error } from "@/components/error.ripple";
import { RoutesContext } from "@/state.ripple";


function getComponent(module) {
	const mainComponent =  module.Layout || module.Page || module.default || null;
	const loadingComponent = module.Loading;
	const errorComponent = module.Error;
	const loader = module.loader;
	const metadata = module.metadata;
	return {
		mainComponent, loadingComponent, errorComponent, loader, metadata
	}
}

function updateMetadata(metadata, context){
	if(metadata) {
		document.title = metadata.title
	}
	else if(context.has("documentTitle")){
		document.title = context.get("documentTitle")
	}
}

export function isPromiseLike(value) {
  return value && typeof value.then === "function";
}

export component DynamicDataComponent({ element, data, children}: { element, data?, children?}){
	let $dynamicComponent = (__anchor, props, __block) => {
		console.log("loading dynamic data", @data)
		element(__anchor, {...props, ...(@data || {})}, __block)
	};

	<$dynamicComponent>
		if(children){
			<children />
		}
	</$dynamicComponent>
}

export component RouteComponent({ id, route, routeProps, routeChildren  }){
	const loading = track(true);
	let $loadingComponent = null;

	let $error = false;
	let $errorComponent = null;

	let routeComponent = track(null);
	let $childComponentLoaded = null;

	const context = RoutesContext.get();

	const routeData = track({...(routeProps || {})});

	effect(() => {
		if(!id == "not-found") {
			@loading = false;
			return
		};

		try {
			route()
				.then(getComponent)
				.then(module => {
					updateMetadata(module.metadata, context);
					if(module.loadingComponent) {
						console.log("page has loading component", id);
						$loadingComponent = module.loadingComponent;
					}
					if(module.errorComponent) {
						console.log("page has error component", id);
						$errorComponent = module.errorComponent;
					}
					return module
				})
				.then((module) => {
					return new Promise((resolve, reject) => {
						if(module.loader){
							const loaderData = typeof(module.loader) === "function" ? module.loader({...(routeProps || {})}): {};
							if(isPromiseLike(loaderData)) {
								loaderData.then(r => resolve({...module, loaderData: r})).catch(reject)
							}
							else{
								resolve({...module, loaderData})
							}
						}
						else {
							resolve({...module, loaderData: {}})
						}
					})
				})
				.then(({mainComponent, loaderData}) => {
						if(!mainComponent && id != "not-found") {
							console.warn("warning: node named Page or default export found in page ", routeProps)
						}
						@loading = false;
						@routeData = {...(routeProps || {}), loaderData};
						@routeComponent = mainComponent;
						if(id.startsWith("layout:")) {
							$childComponentLoaded = setTimeout(() => {
								console.warn("warning: make sure to user children in layout component ", id)
							}, 1000)
						}
					})
					.catch(e => {
						console.error("Error occurred while loading route. Error Code: 1", routeProps);
						console.error(e);
						$error = true;
					});
		}
		catch(e) {
			console.error("Error occurred while loading route. Error Code: 2", routeProps);
			console.error(e)
		}
	})

	try {
		if(@loading) {
			if($error) {
				if($errorComponent) {
					<DynamicDataComponent element={$errorComponent} data={routeData}/>
				}
				else {
					<Error />
				}
			}
			else if($loadingComponent) {
				<DynamicDataComponent element={$loadingComponent} data={routeData}/>
			}
			else {
				<Loading />
			}
		}
		else if(id == "not-found") {
			<NotFound />
		}
		else if(@routeComponent){
			<DynamicDataComponent element={@routeComponent} data={routeData}>
				component children() {
					clearTimeout($childComponentLoaded)
					for(let child of routeChildren) {
						<RouteComponent id={child.id} route={child.route} routeProps={child.props} routeChildren={child.children} />
					}
				}
			</DynamicDataComponent>
		}
	
	}
	catch(e) {
		console.error("Error occurred while loading route. Error Code: 3", routeProps);
		console.error(e)
		if($errorComponent) {
			try {
				<DynamicDataComponent element={$errorComponent} data={routeData}/>
			}
			catch(e) { 
				console.error("Error occurred while loading route. Error Code: 4", routeProps);
				console.error(e);
				<Error />
			}
		}
		else {
			<Error />
		}
	}
}