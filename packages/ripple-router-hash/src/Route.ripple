import { effect, RippleArray } from 'ripple';
import { arrayToTree } from "@/lib/utils";
import { NotFound } from "@/components/NotFound.ripple";
import { Loading } from "@/components/Loading.ripple";
import { RouteComponent } from "./route-component.ripple"

export component Route({ $route }: {
	$route?: { 
		layouts?: any[],
		component: Function,
		params?: {[key: string]: string},
		path: string
	}}) {
	let $tree = new RippleArray();

	effect(() => {
		if(!$route || typeof $route.path == "undefined" ) {
			$tree = null;
			return
		};
		const comps = []
		const { layouts, component, params, path} =  $route;
		const props = {params, path}
		if(layouts?.length > 0) {
			layouts.forEach(l => comps.push({ id: `layout:${l.id}`, import: l.import, props: props}))
		}
		if($route.path && component) {
			comps.push({id: `page:${$route.path}`, import: component, props: props});
		}
		else {
			comps.push({id: `not-found`, import: null, props: props});
		}
		
		const newTree = arrayToTree(comps);
		$tree = newTree;
	})

	if ($tree?.$length == 0) {
		<Loading />
	}
	
	if ($tree == null) {
		<NotFound />
	} 
	
	for(let child of $tree) {
		<RouteComponent $component={child} />
	}
}